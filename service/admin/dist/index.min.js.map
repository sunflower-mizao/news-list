{"version":3,"sources":["index.js"],"names":["fs","require","mysql2","deleteData","connection","createConnection","host","user","password","database","module","exports","request","_request$body","title","type","tempPath","imgUrl","newTime","_ref","_ref2","rows","regeneratorRuntime","async","_context","prev","next","body","img","size","existsSync","files","path","writeFileSync","name","readFileSync","Date","getFullYear","awrap","promise","query","sent","_slicedToArray","console","log","abrupt","stop","getData","p","perPage","_ref3","_ref4","_context2","concat","getTotal","_ref5","_ref6","_context3","getTotalData","_ref7","_ref8","_context4","mkdirSync","_ref9","_ref10","_context5","id"],"mappings":"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","file":"index.min.js","sourcesContent":["const fs = require(\"fs\");\r\nconst mysql2 = require(\"mysql2\");\r\nconst { deleteData } = require(\"../../controller/admin\");\r\nconst connection = mysql2.createConnection({\r\n    host:'localhost',\r\n    user:'root',\r\n    password:'123456',\r\n    database:'js04'\r\n})\r\nmodule.exports = {\r\n    async addData(request){\r\n        let {title,type} = request.body;\r\n        if(request.files.img.size>0){\r\n            if(!fs.existsSync(\"static/uploads\")){\r\n                fs.mkdirSync(\"static/uploads\");\r\n            }\r\n            let tempPath = request.files.img.path;\r\n            fs.writeFileSync(\"static/uploads/\"+request.files.img.name,fs.readFileSync(tempPath));\r\n            let imgUrl = \"/uploads/\"+request.files.img.name;\r\n            let newTime = new Date().getFullYear();\r\n            const [rows] = await connection.promise().query(\"INSERT INTO news(title,imgUrl,`from`,newTime) VALUES (?,?,?,?)\",[title,imgUrl,type,newTime]);\r\n            console.log(rows);\r\n            return rows;\r\n        }\r\n    },\r\n    async getData(p,perPage){\r\n        const [rows] = await connection.promise().query(`SELECT * FROM news LIMIT ${(p-1)*perPage},${perPage}`);\r\n        // console.log(rows);\r\n        return rows;\r\n    },\r\n    async getTotal(){\r\n        const [rows] = await connection.promise().query(`SELECT * FROM news`);\r\n        // console.log(rows);\r\n        return rows.length;\r\n    },\r\n    async getTotalData(){\r\n        const [rows] = await connection.promise().query(`SELECT * FROM news`);\r\n        return rows;\r\n    },\r\n    async deleteData(id){\r\n        const [rows] = await connection.promise().query(`DELETE FROM news WHERE id=?`,[id]);\r\n        return rows;\r\n    }\r\n}"]}