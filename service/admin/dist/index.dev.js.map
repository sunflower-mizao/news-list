{"version":3,"sources":["index.js"],"names":["fs","require","mysql2","deleteData","connection","createConnection","host","user","password","database","module","exports","addData","request","body","title","type","files","img","size","existsSync","mkdirSync","tempPath","path","writeFileSync","name","readFileSync","imgUrl","newTime","Date","getFullYear","promise","query","rows","console","log","getData","p","perPage","getTotal","length","getTotalData","id"],"mappings":";;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;eACuBA,OAAO,CAAC,wBAAD,C;IAAtBE,U,YAAAA,U;;AACR,IAAMC,UAAU,GAAGF,MAAM,CAACG,gBAAP,CAAwB;AACvCC,EAAAA,IAAI,EAAC,WADkC;AAEvCC,EAAAA,IAAI,EAAC,MAFkC;AAGvCC,EAAAA,QAAQ,EAAC,QAH8B;AAIvCC,EAAAA,QAAQ,EAAC;AAJ8B,CAAxB,CAAnB;AAMAC,MAAM,CAACC,OAAP,GAAiB;AACPC,EAAAA,OADO,mBACCC,OADD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEUA,OAAO,CAACC,IAFlB,EAEJC,KAFI,iBAEJA,KAFI,EAEEC,IAFF,iBAEEA,IAFF;;AAAA,kBAGNH,OAAO,CAACI,KAAR,CAAcC,GAAd,CAAkBC,IAAlB,GAAuB,CAHjB;AAAA;AAAA;AAAA;;AAIL,gBAAG,CAACnB,EAAE,CAACoB,UAAH,CAAc,gBAAd,CAAJ,EAAoC;AAChCpB,cAAAA,EAAE,CAACqB,SAAH,CAAa,gBAAb;AACH;;AACGC,YAAAA,QAPC,GAOUT,OAAO,CAACI,KAAR,CAAcC,GAAd,CAAkBK,IAP5B;AAQLvB,YAAAA,EAAE,CAACwB,aAAH,CAAiB,oBAAkBX,OAAO,CAACI,KAAR,CAAcC,GAAd,CAAkBO,IAArD,EAA0DzB,EAAE,CAAC0B,YAAH,CAAgBJ,QAAhB,CAA1D;AACIK,YAAAA,MATC,GASQ,cAAYd,OAAO,CAACI,KAAR,CAAcC,GAAd,CAAkBO,IATtC;AAUDG,YAAAA,OAVC,GAUS,IAAIC,IAAJ,GAAWC,WAAX,EAVT;AAAA;AAAA,4CAWgB1B,UAAU,CAAC2B,OAAX,GAAqBC,KAArB,CAA2B,gEAA3B,EAA4F,CAACjB,KAAD,EAAOY,MAAP,EAAcX,IAAd,EAAmBY,OAAnB,CAA5F,CAXhB;;AAAA;AAAA;AAAA;AAWEK,YAAAA,IAXF;AAYLC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAZK,6CAaEA,IAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBPG,EAAAA,OAhBO,mBAgBCC,CAhBD,EAgBGC,OAhBH;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAiBYlC,UAAU,CAAC2B,OAAX,GAAqBC,KAArB,oCAAuD,CAACK,CAAC,GAAC,CAAH,IAAMC,OAA7D,cAAwEA,OAAxE,EAjBZ;;AAAA;AAAA;AAAA;AAiBFL,YAAAA,IAjBE;AAAA,8CAmBFA,IAnBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBPM,EAAAA,QArBO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAsBYnC,UAAU,CAAC2B,OAAX,GAAqBC,KAArB,sBAtBZ;;AAAA;AAAA;AAAA;AAsBFC,YAAAA,IAtBE;AAAA,8CAwBFA,IAAI,CAACO,MAxBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BPC,EAAAA,YA1BO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CA2BYrC,UAAU,CAAC2B,OAAX,GAAqBC,KAArB,sBA3BZ;;AAAA;AAAA;AAAA;AA2BFC,YAAAA,IA3BE;AAAA,8CA4BFA,IA5BE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BP9B,EAAAA,UA9BO,sBA8BIuC,EA9BJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CA+BYtC,UAAU,CAAC2B,OAAX,GAAqBC,KAArB,gCAAyD,CAACU,EAAD,CAAzD,CA/BZ;;AAAA;AAAA;AAAA;AA+BFT,YAAAA,IA/BE;AAAA,8CAgCFA,IAhCE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["const fs = require(\"fs\");\r\nconst mysql2 = require(\"mysql2\");\r\nconst { deleteData } = require(\"../../controller/admin\");\r\nconst connection = mysql2.createConnection({\r\n    host:'localhost',\r\n    user:'root',\r\n    password:'123456',\r\n    database:'js04'\r\n})\r\nmodule.exports = {\r\n    async addData(request){\r\n        let {title,type} = request.body;\r\n        if(request.files.img.size>0){\r\n            if(!fs.existsSync(\"static/uploads\")){\r\n                fs.mkdirSync(\"static/uploads\");\r\n            }\r\n            let tempPath = request.files.img.path;\r\n            fs.writeFileSync(\"static/uploads/\"+request.files.img.name,fs.readFileSync(tempPath));\r\n            let imgUrl = \"/uploads/\"+request.files.img.name;\r\n            let newTime = new Date().getFullYear();\r\n            const [rows] = await connection.promise().query(\"INSERT INTO news(title,imgUrl,`from`,newTime) VALUES (?,?,?,?)\",[title,imgUrl,type,newTime]);\r\n            console.log(rows);\r\n            return rows;\r\n        }\r\n    },\r\n    async getData(p,perPage){\r\n        const [rows] = await connection.promise().query(`SELECT * FROM news LIMIT ${(p-1)*perPage},${perPage}`);\r\n        // console.log(rows);\r\n        return rows;\r\n    },\r\n    async getTotal(){\r\n        const [rows] = await connection.promise().query(`SELECT * FROM news`);\r\n        // console.log(rows);\r\n        return rows.length;\r\n    },\r\n    async getTotalData(){\r\n        const [rows] = await connection.promise().query(`SELECT * FROM news`);\r\n        return rows;\r\n    },\r\n    async deleteData(id){\r\n        const [rows] = await connection.promise().query(`DELETE FROM news WHERE id=?`,[id]);\r\n        return rows;\r\n    }\r\n}"],"file":"index.dev.js"}